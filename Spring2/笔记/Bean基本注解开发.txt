基本Bean注解，
主要是使用注解的方式替代原有xml的<bean>标签及其标签属性的配置
<bean id="" name="" Class="" scope="" lazy-init="" init-method="" destroy-method="" abstract="" autowire="" factory-bean="" factory-method=""></bean>
使用@Component 注解替代<bean>标签
xml配置
<bean id="" class="">
注解
@Component
描述:被该注解标识的类，会在指定扫描范围内被spring加载并实例化

@Component就单纯-个value属性，那么xml配置<bean>时那些属性怎么进行配置呢?
Spring是通过注解方式去配置的之前 <bean>标签中的那些属性，例如:使用@Component 注解替代<bean>标签
xml配置                      注解                 描述
<bean scope="">             @Scope              在类上或使用了@Bean标注的方法上，标注Bean的作用范围，取值为singleton或prototype
<bean lazy-init="">         @Lazy               在类上或使用了@Bean标注的方法上，标注Bean是否延迟加载，取值为true和false
<bean init-method="">       @PostConstruct      在方法上使用，标注Bean的实例化后执行的方法
<bean destroy-method="">    @PreDestroy         在方法上使用，标注Bean的销毁前执行方法

由于JavaEE开发是分层的，为了每层Bean标识的注解语义化更加明确，@Component又衍生出如下三个注解
衍生注解        描述
@Repository   在Dao层类上使用
@Service      在Service层类上使用
@Controller   在Web层类上使用

@Repository("userDao")
public class UserDaoImpl{
implements UserDao{}
@Service(“userService”)
public class UserServiceImpl implements UserService{}
@Controller("userService")
public class UserController {}
}

Bean依赖注入的注解,主要是使用注解的方式替代xml的
<property>己成属性的注入操作
<bean id=" Class=“”>
<property name="" value=""/>
<property name=“” ref=""/>
</bean>
Spring主要提供如下注解，用于在Bean内部进行属性注入的:
属性注入注解      描述
@Value         使用在字段或方法上，用于注入普通数据
@Autowired     使用在字段或方法上，用于根据类型(byType)注入引用数据
@Qualifier     使用在字段或方法上，结合@Autowired，根据名称注入
@Resource      使用在字段或方法上，根据类型或名称进行注入

扩展:@Profile 注解的作用同于xml配置时学习profile属性，是进行环境切换使用的
<beans profile="test">
注解 @Profile 标注在类或方法上，标注当前产生的Bean从属于哪个环境，只有激活了当前环境，被标注的Bean才
能被注册到Spring容器里，不指定环境的Bean，任何环境下都能注册到Spring容器里
dRepository("userDao")
@Profile("test")
public class UserDaolmpl
implements UserDao{}
@Repository("userDao2")
public class UserDaoImpl2
implements UserDao{}
可以使用以下两种方式指定被激活的环境:
使用命令行动态参数，虚拟机参数位置加载-spring.profiles.active=test
使用代码的方式设置环境变量 System.setProperty("spring.profiles.active","test”);

第三方框架整合，依然使用MyBatis作为整合对象，之前我们已经使用xml方式整合了MyBatis，现在使用注解方式
无非就是将xml标签替换为注解，将xml配置文件替换为配置类而已，原有xml方式整合配置如下:
<!--配置数据源-->
class="com.alibaba.druid.pool.DruidDatasource">
<bean id="datasource
<property name=“url” value="jdbc:mysql://localhost:3306/mybatis"></property>
<property name = "username" value="root"></property>
<property name="password" value="root"></property>
</bean>
<!--配置SalSessionFactoryBean
bean class:"org.mybatis.spring.SqlsessionFactoryBean">
<property name="datasource!
ref="datasource"></property>
</bean>
<!--配置Mapper包扫描
bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
value="com.clover.dao"></property>
<property name="basePackage"
</bean>

注解方式，Spring整合MyBatis的原理，关键在于@MapperScan，@MapperScan不是Spring提供的注解，是
MyBatis为了整合Spring，在整合包org.mybatis.spring.annotation中提供的注解，源码如下:
@Retention(RetentionPolicy.RUNTIME)
dTarget({ElementType.TYPE})
@Documented
@Import({MapperScannerRegistrar.class})
@Repeatable(MapperScans.class)
public interface MapperScan(
String||value()default {};
String||basePackages()default {};
Class<?>||basePackageClasses()default ;
Class<? extends Annotation> annotationClass() default Annotation.class,
重点关注一下@Import({MapperScannerRegistrar.class})，当@MapperScan被扫描加载时，会解析@lmport注
解，从而加载指定的类，此处就是加载了MapperScannerRegistrar

Spring与MyBatis注解方式整合有个重要的技术点就是@lmport，第三方框架与Spring整合xml方式很多是凭借自
定义标签完成的，而第三方框架与Spring整合注解方式很多是靠@Import注解完成的。
@Import可以导入如下三种类:
普通的配置类
实现ImportSelector接口的类
实现ImportBeanDefinitionRegistrar接囗的类