Spring开发中主要是对Bean的配置，Bean的常用配置一览如下:
Xml配置方式
<bean id="" class="">
<bean name="">
<bean scope="">
<bean lazy-init="">
<bean init-method="">
<bean destroy-method="">
<bean autowire="byType">
<bean factory-bean="" factory-method=""/>
功能描述
Bean的id和全限定名配置
通过name设置Bean的别名，通过别名也能直接获取到Bean实例
Bean的作用范围，BeanFactory作为容器时取值singleton和prototype
Bean的实例化时机，是否延迟加载。BeanFactory作为容器时无效
Bean实例化后自动执行的初始化方法，method指定方法名
Bean实例销毁前的方法，method指定方法名
设置自动注入模式，常用的有按照类型byType，按照名字byName
指定哪个工厂Bean的哪个方法完成Bean的创建

6)Bean的实例化配置
Spring的实例化方式主要如下两种:
构造方式实例化:底层通过构造方法对Bean进行实例化
    public UserServiceImp(){
        System.out.println("无参构造");
    }

    public UserServiceImp(String name){
        System.out.println("有参构造");
    }
    参数设置
    <constructor-arg name="name" value="tom"></constructor-arg>

工厂方式实例化:底层通过调用自定义的工厂方法对Bean进行实例化
工厂方式实例化Bean，又分为如下三种:
静态工厂方法实例化Bean
建立工厂bean，然后绑定;
实例工厂方法实例化Bean（第三方jar包的bean的实例化配置）
建立工厂bean，配置工厂bean，然后绑定;
实现FactoryBean规范延迟实例化Bean（不常用）
BeanFactoryFB

7)Bean的依赖注入配置
Bean的依赖注入有两种方式:
注入方式
通过Bean的set方法注入
通过构造Bean的方法进行注入
配置方式
<property name="userDao" ref="userDao"/>
<property name="userDao" value="haohao"/>
<constructor-arg name="name" ref="userDao"/>
<constructor-arg name="name" value="haohao"/>
其中，ref是 reference 的缩写形式，翻译为:涉及，参考的意思，用于引用其他Bean的id。value 用于注入普通属性值。

依赖注入的数据类型有如下三种:
普通数据类型，例如:String、int、boolean等，通过value属性指定
引用数据类型，例如:UserDaolmpl、DataSource等，通过ref属性指定
集合数据类型，例如:List、Map、Properties等

7)Bean的依赖注入配置
扩展:自动装配方式
如果被注入的属性类型是Bean引用的话，那么可以在<bean>标签中使用 autowire 属性去配置自动注入方式，属
性值有两个:
byName:通过属性名自动装配，即去匹配 setXxx与id="xxx"(name=“xxx”)是否一致;
byType:通过Bean的类型从容器中匹配，匹配出多个相同Bean类型时，报错。
<bean id="UserService"
class="com.clover.service.impl.UserServiceImpl"
autowire="byType">

8)Spring的其他配置标签
Spring 的 xml标签大体上分为两类，一种是默认标签，一种是自定义标签
默认标签:就是不用额外导入其他命名空间约束的标签，例如<bean>标签

Spring的默认标签用到的是Spring的默认命名空间
<?xn1
version="1.0”
encoding="uIF-8”?>
xmins:"http://www.springframework.org/schema/beans"
<beans
xmins:xsi="http://www.w3.org/2001/xschema-instance"
xsi:schemaLocation "http://www.springframework.org/schema/beans
http://www,springframework,org/schema/beans/spring-beans .xsd">
</beans>
该命名空间约束下的默认标签如下:
标签
<beans>   一般作为xml配置根标签，其他标签都是该标签的子标签
<bean>    Bean的配置标签，上面已经详解了，此处不再阐述
<import>  外部资源导入标签
<alias>   指定Bean的别名标签，使用较少

<beans>标签，除了经常用的做为根标签外，还可以嵌套在根标签内，使用profile属性切换开发环境
配置测试环境下，需要加载的Bean实例-->
<beans profile="test"></beans>
配置开发环境下，需要加载的Bean实例
l----><beans profile="dev"></beans>
可以使用以下两种方式指定被激活的环境:
使用命令行动态参数，虚拟机参数位置加载-Dspring.profiles.active=test
使用代码的方式设置环境变量 System.setProperty("spring.profiles.active","test”)!!!

<import>标签，用于导入其他配置文件，项目变大后，就会导致一个配置文件内容过多，可以将一个配置文件根
据业务某块进行拆分，拆分后，最终通过<import>标签导入到一个主配置文件中，项目加载主配置文件就连同
<import>导入的文件一并加载了
导入用户模块配置文件--
<import resource="classpath:UserModuleApplicationContext.xml"/>
导入商品模块配置文件--
<import resource="classpath:ProductModuleApplicationcontext.xml"/>

<alias>标签是为某个Bean添加别名，与在<bean>标签上使用name属性添加别名的方式一样，我们为UserServicelmpl指定四个别名:aaa、bbb、xxx、yyy
bean name配置
<bean id="userService" name="aaa,bbb" class="com.itheima.service.impl.UserServiceImpl">
<property name="userpao" wref="userpao"/>
</bean>
alias配置
<!--指定别名--><alias name="xx" alias="xxx"/>
<alias name="userservice! alias="yyy"/>
<alias names"userservicer alias="zzz"/>

Spring的自定义标签需要引入外部的命名空间，并为外部的命名空间指定前缀，使用<前缀:标签>形式的标签，称
之为自定义标签，自定义标签的解析流程也是 Spring xml扩展点方式之一，在《Spring整合其他框架》章节进行
详细介绍
默认标签
<bean id="userDao" class="com.clover.dao.impl.UserDaoImp/>
<!--自定义标签-->
<context:property-placeholder/>
<mve:annotation-driven/>
<dubbo:application name="application"/>

Spring 的get方法
方法定义
Object getBean (String beanName)
T getBean (Class type)
T getBean(String beanName, Class type)
返回值和参数
根据beanName从容器中获取Bean实例，要求容器中Bean唯一，返回值为Object，需要强转
根据Class类型从容器中获取Bean实例，要求容器中Bean类型唯一，返回值为Class类型实例
无需强转
根据beanName从容器中获得Bean实例，返回值为Class类型实例，无需强转
//根据beanName获取容器中的Bean实例，需要手动强转
UserService userService = (UserService)applicationContext.getBean("userService");
//根据Bean类型去容器中匹配对应的Bean实例，如存在多个匹配Bean则报错
UserService userService2 = applicationContext.getBean(UserService.class);
//根据beanName获取容器中的Bean实例，指定Bean的Type类型
UserService userService3 = applicationContext.getBean("userService",UserService.class);